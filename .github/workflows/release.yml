name: Release
on:
  #schedule:
  #- cron: '0 7 * * *'
  workflow_dispatch:
  #push:
jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.get-tag-and-release.outputs.release }}
      tag: ${{ steps.get-tag-and-release.outputs.tag }}
    steps:
    - name: Get tag & release
      id: get-tag-and-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tag=$(gh api repos/neovim/neovim/tags --jq '.[0].name')
        release=$(gh api repos/${{ github.repository }}/releases --jq ".[].tag_name | select(. == \"${tag}\")")
        printf 'tag=%s\n' ${tag} >> $GITHUB_OUTPUT
        printf 'release=%s\n' ${release} >> $GITHUB_OUTPUT
  linux:
    if: ${{ needs.check-release.outputs.release == '' }}
    needs: check-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        image: tonistiigi/binfmt:latest # default
        platforms: arm64
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true
    - name: Build
      run: |
        docker buildx build --platform linux/arm64 \
          --build-arg CC=gcc-11 \
          --build-arg CMAKE_BUILD_TYPE=Release \
          --build-arg CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX:PATH=" \
          --build-arg ARCH=arm64 \
          --build-arg GIT_TAG=${{ needs.check-release.outputs.tag }} \
          -f Dockerfile -o build .
    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ needs.check-release.outputs.tag }} --notes="${{ needs.check-release.outputs.tag }}" build/*.tar.gz
